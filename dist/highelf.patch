diff --git a/src/server/game/Entities/Player/PlayerTaxi.cpp b/src/server/game/Entities/Player/PlayerTaxi.cpp
index 9c56f5824..112678ae0 100644
--- a/src/server/game/Entities/Player/PlayerTaxi.cpp
+++ b/src/server/game/Entities/Player/PlayerTaxi.cpp
@@ -67,6 +67,9 @@ void PlayerTaxi::InitTaxiNodesForLevel(uint32 race, uint32 chrClass, uint8 level
         case RACE_DRAENEI:
             SetTaximaskNode(94);
             break;     // Draenei
+        case RACE_HIGHELF:
+            SetTaximaskNode(2);
+            break;     // High Elf
     }
 
     // new continent starting masks (It will be accessible only at new map)
diff --git a/src/server/game/Globals/ObjectMgr.cpp b/src/server/game/Globals/ObjectMgr.cpp
index 330ee91e0..e231cd677 100644
--- a/src/server/game/Globals/ObjectMgr.cpp
+++ b/src/server/game/Globals/ObjectMgr.cpp
@@ -4364,7 +4364,7 @@ void ObjectMgr::LoadPlayerInfo()
                     continue;
 
                 // skip expansion races if not playing with expansion
-                if (sWorld->getIntConfig(CONFIG_EXPANSION) < EXPANSION_THE_BURNING_CRUSADE && (race == RACE_BLOODELF || race == RACE_DRAENEI))
+                if (sWorld->getIntConfig(CONFIG_EXPANSION) < EXPANSION_THE_BURNING_CRUSADE && (race == RACE_BLOODELF || race == RACE_DRAENEI || race == RACE_HIGHELF))
                     continue;
 
                 // skip expansion classes if not playing with expansion
diff --git a/src/server/game/Handlers/CharacterHandler.cpp b/src/server/game/Handlers/CharacterHandler.cpp
index bf0721c4a..81da489d7 100644
--- a/src/server/game/Handlers/CharacterHandler.cpp
+++ b/src/server/game/Handlers/CharacterHandler.cpp
@@ -2179,6 +2179,9 @@ void WorldSession::HandleCharFactionOrRaceChangeCallback(std::shared_ptr<Charact
             case RACE_BLOODELF:
                 stmt->SetData(1, 137);
                 break;
+            case RACE_HIGHELF:
+                stmt->SetData(1, 137);
+                break;
             }
 
             trans->Append(stmt);
diff --git a/src/server/game/Spells/Auras/SpellAuraEffects.cpp b/src/server/game/Spells/Auras/SpellAuraEffects.cpp
index 740e51877..79a465a5c 100644
--- a/src/server/game/Spells/Auras/SpellAuraEffects.cpp
+++ b/src/server/game/Spells/Auras/SpellAuraEffects.cpp
@@ -2194,6 +2194,9 @@ void AuraEffect::HandleAuraTransform(AuraApplication const* aurApp, uint8 mode,
                                 case RACE_BLOODELF:
                                     target->SetDisplayId(target->getGender() == GENDER_MALE ? 17829 : 17830);
                                     break;
+                                case RACE_HIGHELF:
+                                    target->SetDisplayId(target->getGender() == GENDER_MALE ? 17829 : 17830);
+                                    break;
                                 // Orc
                                 case RACE_ORC:
                                     target->SetDisplayId(target->getGender() == GENDER_MALE ? 10139 : 10140);
@@ -2253,6 +2256,10 @@ void AuraEffect::HandleAuraTransform(AuraApplication const* aurApp, uint8 mode,
                                 case RACE_BLOODELF:
                                     target->SetDisplayId(target->getGender() == GENDER_MALE ? 25032 : 25043);
                                     break;
+                                // High Elf
+                                case RACE_HIGHELF:
+                                    target->SetDisplayId(target->getGender() == GENDER_MALE ? 25032 : 25043);
+                                    break;
                                 // Orc
                                 case RACE_ORC:
                                     target->SetDisplayId(target->getGender() == GENDER_MALE ? 25039 : 25050);
@@ -2309,6 +2316,7 @@ void AuraEffect::HandleAuraTransform(AuraApplication const* aurApp, uint8 mode,
                             switch (target->GetDisplayRace())
                             {
                                 case DisplayRace::BloodElf:
+                                case DisplayRace::HighElf:
                                     if (urand(0, 1))
                                         target->SetDisplayId(target->getGender() == GENDER_MALE ? 21839 : 21838);
                                     else
@@ -2397,6 +2405,7 @@ void AuraEffect::HandleAuraTransform(AuraApplication const* aurApp, uint8 mode,
                             switch (target->GetDisplayRace())
                             {
                                 case DisplayRace::BloodElf:
+                                case DisplayRace::HighElf:
                                     target->SetDisplayId(target->getGender() == GENDER_MALE ? 18793 : 18785);
                                     break;
                                 case DisplayRace::Orc:
@@ -2439,6 +2448,7 @@ void AuraEffect::HandleAuraTransform(AuraApplication const* aurApp, uint8 mode,
                             switch (target->GetDisplayRace())
                             {
                                 case DisplayRace::BloodElf:
+                                case DisplayRace::HighElf:
                                     target->SetDisplayId(target->getGender() == GENDER_MALE ? 19170 : 19169);
                                     break;
                                 case DisplayRace::Orc:
@@ -2481,6 +2491,7 @@ void AuraEffect::HandleAuraTransform(AuraApplication const* aurApp, uint8 mode,
                             switch (target->GetDisplayRace())
                             {
                                 case DisplayRace::BloodElf:
+                                case DisplayRace::HighElf:
                                     target->SetDisplayId(target->getGender() == GENDER_MALE ? 18841 : 18840);
                                     break;
                                 case DisplayRace::Orc:
@@ -2523,6 +2534,7 @@ void AuraEffect::HandleAuraTransform(AuraApplication const* aurApp, uint8 mode,
                             switch (target->GetDisplayRace())
                             {
                                 case DisplayRace::BloodElf:
+                                case DisplayRace::HighElf:
                                     target->SetDisplayId(target->getGender() == GENDER_MALE ? 22361 : 22360);
                                     break;
                                 case DisplayRace::Orc:
@@ -2565,6 +2577,7 @@ void AuraEffect::HandleAuraTransform(AuraApplication const* aurApp, uint8 mode,
                             switch (target->GetDisplayRace())
                             {
                                 case DisplayRace::BloodElf:
+                                case DisplayRace::HighElf:
                                     target->SetDisplayId(target->getGender() == GENDER_MALE ? 21086 : 21085);
                                     break;
                                 case DisplayRace::Orc:
@@ -2607,6 +2620,7 @@ void AuraEffect::HandleAuraTransform(AuraApplication const* aurApp, uint8 mode,
                             switch (target->GetDisplayRace())
                             {
                                 case DisplayRace::BloodElf:
+                                case DisplayRace::HighElf:
                                     target->SetDisplayId(target->getGender() == GENDER_MALE ? 24508 : 24519);
                                     break;
                                 case DisplayRace::Orc:
@@ -2649,6 +2663,7 @@ void AuraEffect::HandleAuraTransform(AuraApplication const* aurApp, uint8 mode,
                             switch (target->GetDisplayRace())
                             {
                                 case DisplayRace::BloodElf:
+                                case DisplayRace::HighElf:
                                     target->SetDisplayId(target->getGender() == GENDER_MALE ? 25032 : 25043);
                                     break;
                                 case DisplayRace::Orc:
diff --git a/src/server/scripts/Commands/cs_misc.cpp b/src/server/scripts/Commands/cs_misc.cpp
index cac1142df..4211d9c8f 100644
--- a/src/server/scripts/Commands/cs_misc.cpp
+++ b/src/server/scripts/Commands/cs_misc.cpp
@@ -2248,6 +2248,9 @@ public:
             case RACE_DRAENEI:
                 raceStr = "Draenei";
                 break;
+            case RACE_HIGHELF:
+                raceStr = "High Elf";
+                break;
         }
 
         switch (classid)
diff --git a/src/server/scripts/EasternKingdoms/ScarletEnclave/chapter1.cpp b/src/server/scripts/EasternKingdoms/ScarletEnclave/chapter1.cpp
index bc837f753..af45c0536 100644
--- a/src/server/scripts/EasternKingdoms/ScarletEnclave/chapter1.cpp
+++ b/src/server/scripts/EasternKingdoms/ScarletEnclave/chapter1.cpp
@@ -1093,8 +1093,24 @@ class spell_death_knight_initiate_visual : public SpellScript
         uint32 spellId;
         switch (target->GetDisplayId())
         {
+            /*
+to find out high elf ids, use query:
+select extra.id from db_CreatureModelData_12340 md,  db_CreatureDisplayInfo_12340 di, db_CreatureDisplayInfoExtra_12340 extra  WHERE md.id = di.modelid 
+and di.ExtendedDisplayInfoID = extra.ID
+and di.id=25369 // this id is for blood elf female below
+
+then make note of the id and add 22000 (because the high elves CreatureDisplayInfoExtra IDS were created from blood elves + 22000)
+in our example, first query returned 17211
+select di.id from db_CreatureModelData_12340 md,  db_CreatureDisplayInfo_12340 di, db_CreatureDisplayInfoExtra_12340 extra  WHERE md.id = di.modelid 
+and di.ExtendedDisplayInfoID = extra.ID
+and extra.id = 17211+22000
+
+second query gives you the id of the high elf model. However I am not sure if this is needed sicne it's NPC. May not be needed after all
+            */
             case 25369: spellId = 51552; break; // bloodelf female
-            case 25373: spellId = 51551; break; // bloodelf male
+            case 33924: spellId = 51552; break; // highelf female
+            case 33925: spellId = 51551; break; // bloodelf male
+            case 25373: spellId = 51551; break; // highelf male
             case 25363: spellId = 51542; break; // draenei female
             case 25357: spellId = 51541; break; // draenei male
             case 25361: spellId = 51537; break; // dwarf female
diff --git a/src/server/scripts/Pet/pet_generic.cpp b/src/server/scripts/Pet/pet_generic.cpp
index 6e91d2a19..3eebdecd6 100644
--- a/src/server/scripts/Pet/pet_generic.cpp
+++ b/src/server/scripts/Pet/pet_generic.cpp
@@ -142,6 +142,7 @@ static argentPonyBanner argentBanners[MAX_RACES] =
     {0, 0, ""},
     {2785, 63403, "Silvermoon Champion's Pennant"},
     {2778, 63423, "Exodar Champion's Pennant"}
+    ,{2781, 62594, "Stormwind Champion's Pennant"}
 };
 
 struct npc_pet_gen_argent_pony_bridle : public ScriptedAI
diff --git a/src/server/shared/SharedDefines.h b/src/server/shared/SharedDefines.h
index 0df2a73f1..26a1637b5 100644
--- a/src/server/shared/SharedDefines.h
+++ b/src/server/shared/SharedDefines.h
@@ -89,20 +89,21 @@ enum Races
     //RACE_TAUNKA         = 19,
     //RACE_NORTHREND_SKELETON = 20,
     //RACE_ICE_TROLL      = 21
+    ,RACE_HIGHELF           = 12, // TITLE Blood Elf
 };
 
 // max+1 for player race
-#define MAX_RACES         12
+#define MAX_RACES         13
 
 #define RACEMASK_ALL_PLAYABLE \
     ((1<<(RACE_HUMAN-1))   |(1<<(RACE_ORC-1))          |(1<<(RACE_DWARF-1))   | \
     (1<<(RACE_NIGHTELF-1))|(1<<(RACE_UNDEAD_PLAYER-1))|(1<<(RACE_TAUREN-1))  | \
     (1<<(RACE_GNOME-1))   |(1<<(RACE_TROLL-1))        |(1<<(RACE_BLOODELF-1))| \
-    (1<<(RACE_DRAENEI-1)))
+    (1<<(RACE_DRAENEI-1))  | (1<<(RACE_HIGHELF-1)))
 
 #define RACEMASK_ALLIANCE \
     ((1<<(RACE_HUMAN-1)) | (1<<(RACE_DWARF-1)) | (1<<(RACE_NIGHTELF-1)) | \
-    (1<<(RACE_GNOME-1)) | (1<<(RACE_DRAENEI-1)))
+    (1<<(RACE_GNOME-1)) | (1<<(RACE_DRAENEI-1)) | (1<<(RACE_HIGHELF-1)))
 
 #define RACEMASK_HORDE RACEMASK_ALL_PLAYABLE & ~RACEMASK_ALLIANCE
 
@@ -121,7 +122,7 @@ enum class DisplayRace : uint8
     Goblin            = 9,
     BloodElf          = 10,
     Draenei           = 11,
-    FelOrc            = 12,
+    HighElf           = 12,
     Naga              = 13,
     Broken            = 14,
     Skeleton          = 15,
diff --git a/src/server/shared/enuminfo_SharedDefines.cpp b/src/server/shared/enuminfo_SharedDefines.cpp
index db0951816..071840a0d 100644
--- a/src/server/shared/enuminfo_SharedDefines.cpp
+++ b/src/server/shared/enuminfo_SharedDefines.cpp
@@ -42,6 +42,7 @@ AC_API_EXPORT EnumText EnumUtils<Races>::ToString(Races value)
         case RACE_TROLL: return { "RACE_TROLL", "Troll", "" };
         case RACE_BLOODELF: return { "RACE_BLOODELF", "Blood Elf", "" };
         case RACE_DRAENEI: return { "RACE_DRAENEI", "Draenei", "" };
+        case RACE_HIGHELF: return { "RACE_HIGHELF", "High Elf", "" };
         default: throw std::out_of_range("value");
     }
 }
@@ -64,6 +65,7 @@ AC_API_EXPORT Races EnumUtils<Races>::FromIndex(std::size_t index)
         case 7: return RACE_TROLL;
         case 8: return RACE_BLOODELF;
         case 9: return RACE_DRAENEI;
+        case 10: return RACE_HIGHELF;
         default: throw std::out_of_range("index");
     }
 }
@@ -83,6 +85,7 @@ AC_API_EXPORT std::size_t EnumUtils<Races>::ToIndex(Races value)
         case RACE_TROLL: return 7;
         case RACE_BLOODELF: return 8;
         case RACE_DRAENEI: return 9;
+        case RACE_HIGHELF: return 10;
         default: throw std::out_of_range("value");
     }
 }
